default:
  image: python:3.12
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.cache/pip

variables:
  CDK_APP_PATH: aopcs_lambda/target/aws
  DEPLOYMENT_ROLE_NAME: RoleGitlabDeployATLAS
  ENVIRONMENT:
      value: DEVELOPMENT
      description: Name of aws environment to deploy to.
      options:
      - DEVELOPMENT
      - VALIDATION
      - PREPRODUCTION
      - PRODUCTION
  VERSION:
    value: ""
    description: "Project tag to deploy. Default to '', i.e. most recent commit on the branch of the pipeline."
  CDK_VERSION:
    value: "2.1006.0"
    description: "The version of CDK to use. Defaults to '2.1006.0'. To use most recent version set CDK_VERSION=''."

stages:
  - Install Dependencies
  - Static Analysis
  - Tests
  - Build Deployment Dependencies
  - Test Deployment
  - Delivery
  - Update dependencies

# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "pipeline"

include:
- project: wmc-4/gitlab-templates
  ref: main
  file:
    - aws/configure_deployment_variables.yml
    - security-tools/osv_scanner.yml
    - git/tagging.yml
    - git/configure_version.yml
    - python/update_dependencies.yml
  # Include release deployment template
- local: deploy_release_template.yml
  rules:
    # run if triggered by upstream release pipeline
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    # run if manually triggered
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "trigger"
  inputs:
    environment: $ENVIRONMENT



.mr_rules:
  rules:
      # If pipeline is created for MRs
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main"


.post_merge_default_branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE == "push"

.tagging_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"

.deployment_rules:
  rules:
    # run if triggered by upstream release pipeline
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    # run if manually triggered
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "trigger"

.security_pipeline_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $UPDATE_DEPENDENCIES != "true"

install-dependencies:
  stage: Install Dependencies
  script:
    - source ./scripts/setup_dev_environment.sh
  rules:
    - !reference [.mr_rules, rules]
    - !reference [.post_merge_default_branch, rules]
    - !reference [.security_pipeline_rules, rules]
  artifacts:
    untracked: false
    when: on_success
    expire_in: "1 hr"
    paths:
      - ./venv

pre-commit:
  stage: Static Analysis
  script:
    - source venv/bin/activate
    - PRE_COMMIT_HOME=${CI_PROJECT_DIR}/.cache/pre-commit
    - pre-commit run --all-files
  rules:
    - !reference [.mr_rules, rules]
    - !reference [.post_merge_default_branch, rules]


pytest:
  stage: Tests
  script:
    - source venv/bin/activate
    - pytest --cov aopcs_lambda/src --cov-report term --cov-report xml:coverage.xml tests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  needs:
    - install-dependencies
  dependencies:
    - install-dependencies
  rules:
    - !reference [.mr_rules, rules]


aws-cdk-synth:
  image:
    name: registry-gitlab.klksi.fr/wmp-4/ci-cd-tools/cdk-python-312
  stage: Test Deployment
  variables:
    ENVIRONMENT: VALIDATION
  needs:
    - install-dependencies
  script:
    - !reference [.prepare-deployment-variables, script]
    - source venv/bin/activate
    - pip list
    - cd $CDK_APP_PATH
    - cdk synth --verbose --profile=$ENVIRONMENT -c environment=$DEPLOYMENT_ENV
    - cdk --version
  dependencies:
    - install-dependencies
  rules:
    - !reference [.mr_rules, rules]



.deploy-app:
  stage: Delivery
  image:
    name: registry-gitlab.klksi.fr/wmp-4/ci-cd-tools/cdk-docker-27
  services:
    - name: docker:27-dind
  variables:
      DOCKER_HOST: "tcp://docker:2375"
      DEPLOYMENT_ROLE_NAME: RoleGitlabDeployATLAS
  script:
    - !reference [.configure-version, before_script]
    - !reference [.prepare-deployment-variables, script]
    - source ./scripts/setup_dev_environment.sh
    - cdk --version
    - bash ./scripts/deploy_app_aws.sh -e $ENVIRONMENT_LOWER -p $ENVIRONMENT --automatic-deployment
  dependencies: []


deploy_development:
  extends: .deploy-app
  stage: Test Deployment
  environment: DEVELOPMENT
  variables:
    ENVIRONMENT: DEVELOPMENT
  rules:
      # If pipeline is created for MRs
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true  # do not fail pipeline if job is not run.
  needs: []

deploy-app-validation:
  extends: .deploy-app
  stage: Delivery
  environment: VALIDATION
  variables:
    ENVIRONMENT: VALIDATION
  rules:
    - !reference [.post_merge_default_branch, rules]


tagging:
  stage: Delivery
  extends: .tagging_repo_from_internal_tag_python
  rules:
    - !reference [.tagging_rules, rules]


update_dependencies:
  extends: .update_dependencies
  script:
    - pur -r aopcs_lambda/target/aws/requirements.txt
    - pur -r requirements.txt
    - !reference [.update_dependencies, script]



osv-scanner:
  stage: Static Analysis
  extends: .osv-scanner
  rules:
    - !reference [.security_pipeline_rules, rules]


synthesize-stacks:
  stage: Static Analysis
  extends: aws-cdk-synth
  artifacts:
    when: on_success
    expire_in: "1 hr"
    paths:
      - $CDK_APP_PATH
  rules:
    - !reference [.security_pipeline_rules, rules]


misconfig-scanning:
  stage: Static Analysis
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  needs:
    - synthesize-stacks
  dependencies:
    - synthesize-stacks
  script:
    - trivy --version
    - trivy fs --exit-code 1 --scanners misconfig $CDK_APP_PATH/cdk.out
  rules:
    - !reference [.security_pipeline_rules, rules]
